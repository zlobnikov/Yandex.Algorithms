// J. Система линейных уравнений - 2

// Ограничение времени	1 секунда
// Ограничение памяти	64Mb
// Ввод	стандартный ввод или input.txt
// Вывод	стандартный вывод или output.txt

// Даны числа a, b, c, d, e, f. Решите систему линейных уравнений

// Формат ввода

// Вводятся 6 вещественных чисел - коэффициенты уравнений.

// Формат вывода

// Вывод программы зависит от вида решения этой системы. Если система не имеет 
// решений, то программа должна вывести единственное число 0. Если система имеет 
// бесконечно много решений, каждое из которых имеет вид y=kx+b, то программа 
// должна вывести число 1, а затем значения k и b. Если система имеет 
// единственное решение (x0,y0), то программа должна вывести число 2, а затем 
// значения x0 и y0. Если система имеет бесконечно много решений вида x=x0, y — 
// любое, то программа должна вывести число 3, а затем значение x0. Если система 
// имеет бесконечно много решений вида y=y0, x — любое, то программа должна 
// вывести число 4, а затем значение y0. Если любая пара чисел (x,y) является 
// решением, то программа должна вывести число 5.

// Числа x0 и y0 будут проверяться с точностью до пяти знаков после точки.

// Пример 1
// Ввод	        Вывод
// 1            2 3 3
// 0
// 0
// 1
// 3
// 3

// Пример 2
// Ввод	        Вывод
// 1            1 -1 1
// 1
// 2
// 2
// 1
// 2

// Пример 3
// Ввод	        Вывод
// 0            4 0.5
// 2
// 0
// 4
// 1
// 2

// Язык: Node.js 14.15.5


function solve(data) {
    const [a, b, c, d, e, f] = data.toString().trim().split('\n').map(n => +n);

    // any options, code 5
    if (a === 0 && b === 0 && c === 0 && d === 0 && e === 0 && f === 0) {
        return [5];
    }

    // don't exist or parallel lines, code 0
    if (a === 0 && b === 0 && e !== 0 ||
        c === 0 && d === 0 && f !== 0 ||
        a / c === b / d && a / c !== e / f && !(e === 0 && f === 0) ||
        b === 0 && d === 0 && e / a !== f / c && a !== 0 && c !== 0 ||
        a === 0 && c === 0 && e / b !== f / d && b !== 0 && d !== 0) {
        return [0];
    }

    // the same line or zeros in one equation, code 1
    if (a / c === b / d) {
        return a !== 0 ? [1, -a / b, e / b] : [1, -c / d, f / d];
    }

    // y doesn't matter, code 3
    if (b === 0 && d === 0) return a !== 0 ? [3, e / a] : [3, f / c];

    // x doesn't matter, code 4
    if (a === 0 && c === 0) return b !== 0 ? [4, e / b] : [4, f / d];

    // the only solution, code 2
    let x, y;
    if (a !== 0) {
        y = (a * f - c * e) / (a * d - b * c);
        x = (e - b * y) / a;
    } else {
        x = (b * f - d * e) / (b * c - a * d);
        y = (e - a * x) / b;
    }
    return [2, x, y];
}

process.stdin.on('data', data => {
    let result = solve(data);
    process.stdout.write(result.join(' '));
    process.exit();
});
