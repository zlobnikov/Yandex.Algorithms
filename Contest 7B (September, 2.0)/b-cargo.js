// B. Таможня

// Ограничение времени             3 секунды
// Ограничение памяти              64Mb
// Ввод                            стандартный ввод или input.txt
// Вывод                           стандартный вывод или output.txt

// Идёт 2163 год. Мишу, который работает в отделении таможни при космодроме 
// города Нью-Питер, вызвал в кабинет шеф.

// Как оказалось, недавно Министерство Налогов и Сборов выделило отделению 
// определённую сумму денег на установку новых аппаратов для автоматического 
// досмотра грузов. Естественно, средства были выделены с таким расчётом, чтобы 
// грузы теперь находились на таможне ровно столько времени, сколько требуется 
// непосредственно на их досмотр.

// В руках шефа каким-то образом оказались сведения о надвигающейся ревизии – 
// список из N грузов, которые будут контролироваться Министерством. Для каждого 
// груза известны время его прибытия, отсчитываемое с некоторого момента, 
// хранимого в большом секрете, и время, требуемое аппарату для обработки этого 
// груза. Шеф дал Мише задание по этим данным определить, какое минимальное 
// количество аппаратов необходимо заказать на заводе, чтобы все грузы 
// Министерства начинали досматриваться сразу после прибытия. Необходимо учесть, 
// что конструкция тех аппаратов, которые было решено установить, не позволяет 
// обрабатывать два груза одновременно на одном аппарате. Напишите программу, 
// которая поможет Мише справиться с его задачей.

// Формат ввода

// На первой строке входного файла задано число N (0 ≤ N ≤ 50 000). На следующих 
// N строках находится по 2 целых положительных числа Ti и Li – время прибытия 
// соответствующего груза и время, требуемое для его обработки (1 ≤ Ti ≤ 10^6, 1 
// ≤ Li ≤ 10^6).

// Формат вывода

// В выходной файл выведите одно число – наименьшее количество аппаратов, 
// которое нужно установить, чтобы не вызвать подозрений у Министерства.

// Пример 1
// Ввод              Вывод
// 3                 2
// 3 2
// 4 2
// 5 2

// Пример 2
// Ввод              Вывод
// 5                 3
// 13 4
// 15 1
// 11 5
// 12 3
// 10 3

// Язык: Node.js 14.15.5


function count(data) {
  data = data.toString().trim().split('\n');
  const n = +data[0];
  const cargo = data.slice(1).map(line => line.split(/\s+/).map(Number));

  const events = [];

  for (let i = 0; i < n; ++i) {
    events.push([cargo[i][0], 1]);
    events.push([cargo[i][0] + cargo[i][1], -1]);
  }

  events.sort((a, b) => {
    if (a[0] === b[0]) return a[1] - b[1];
    else return a[0] - b[0];
  });

  let count = 0;
  let maxCount = 0;

  for (let i = 0; i < events.length; ++i) {
    if (events[i][1] === -1) --count;
    else if (events[i][1] === 1) ++count;

    if (count > maxCount) maxCount = count;
  }

  return maxCount;
}

const fs = require('fs');
const fileContent = fs.readFileSync('input.txt', 'utf8');

const result = count(fileContent);

fs.writeFileSync('output.txt', result + '');
