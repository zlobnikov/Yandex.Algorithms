// B. Кольцевая линия метро

// Ограничение времени           1 секунда
// Ограничение памяти            64Mb
// Ввод                          стандартный ввод или input.txt
// Вывод                         стандартный вывод или output.txt

// Витя работает недалеко от одной из станций кольцевой линии Московского метро, 
// а живет рядом с другой станцией той же линии. Требуется выяснить, мимо какого 
// наименьшего количества промежуточных станций необходимо проехать Вите по 
// кольцу, чтобы добраться с работы домой.

// Формат ввода

// Станции пронумерованы подряд натуральными числами 1, 2, 3, …, N (1-я станция 
// – соседняя с N-й), N не превосходит 100.

// Вводятся три числа: сначала N – общее количество станций кольцевой линии, а 
// затем i и j – номера станции, на которой Витя садится, и станции, на которой 
// он должен выйти. Числа i и j не совпадают. Все числа разделены пробелом.

// Формат вывода

// Требуется выдать минимальное количество промежуточных станций (не считая 
// станции посадки и высадки), которые необходимо проехать Вите.

// Пример 1
// Ввод            Вывод
// 100 5 6         0

// Пример 2
// Ввод            Вывод
// 10 1 9          1

// Пояснения к примерам:
// 1) На кольцевой линии 100 станций; проехать с 5-й на 6-ю станцию Витя может 
// напрямую, без промежуточных станций
// 2) На кольцевой линии 10 станций; проехать с 1-й на 9-ю станцию Витя может 
// через одну промежуточную, ее номер 10

// Язык: Node.js 14.15.5


function count(data) {
  let [n, i, j] = data.toString().trim().split(/\s+/).map(Number);
  [i, j] = [i, j].sort((a, b) => a - b);

  return Math.min(j - i - 1, n - j + i - 1);
}

process.stdin.on('data', data => {
  const result = count(data);
  process.stdout.write(result.toString());
  process.exit();
});
