// E. Газон

// Ограничение времени               1 секунда
// Ограничение памяти                64Mb
// Ввод                              стандартный ввод или input.txt
// Вывод                             стандартный вывод или output.txt

// Фермер Иван с юности следит за своим газоном. Газон можно считать плоскостью, 
// на которой в каждой точке с целыми координатами растет один пучок травы.

// В одно из воскресений Иван воспользовался газонокосилкой и постриг некоторый 
// прямоугольный участок газона. Стороны этого участка параллельны осям 
// координат, а две противоположные вершины расположены в точках (x1, y1) и (x2, 
// y2). Следует отметить, что пучки травы, находящиеся на границе этого 
// прямоугольника, также были пострижены.

// Довольный результатом Иван купил и установил на газоне дождевальную 
// установку. Она была размещена в точке с координатами (x3, y3) и имела радиус 
// действия струи r. Таким образом, установка начала поливать все пучки, 
// расстояние от которых до точки (x3, y3) не превышало r.

// Все было хорошо, но Ивана заинтересовал следующий вопрос: сколько пучков 
// травы оказалось и пострижено, и полито в это воскресенье?

// Требуется написать программу, которая позволит дать ответ на вопрос Ивана.

// Формат ввода

// В первой строке входного файла содержатся четыре целых числа x1, y1, x2, y2 
// (−100 000 ≤ x1 < x2 ≤ 100 000; −100 000 ≤ y1 < y2 ≤ 100 000).

// Во второй строке входного файла содержатся три целых числа x3, y3, r 
// (−100 000 ≤ x3, y3 ≤ 100 000; 1 ≤ r ≤ 100 000)

// Формат вывода

// В выходной файл необходимо вывести одно целое число — число пучков травы, 
// которые были и пострижены, и политы.

// Пример
// Ввод                Вывод
// 0 0 5 4             14
// 4 0 3

// Язык: Node.js 14.15.5


function solve(data) {
  let [x1, y1, x2, y2, x3, y3, r] = data.toString().trim().split(/\s+/)
    .map(Number);

  [x1, x2] = x1 <= x2 ? [x1, x2] : [x2, x1];
  [y1, y2] = y1 <= y2 ? [y1, y2] : [y2, y1];

  const xOuterSquare1 = x3 - r;
  const yOuterSquare1 = y3 - r;

  const xOuterSquare2 = x3 + r;
  const yOuterSquare2 = y3 + r;

  x1 = x1 < xOuterSquare1 ? xOuterSquare1 : x1;
  y1 = y1 < yOuterSquare1 ? yOuterSquare1 : y1;

  x2 = x2 > xOuterSquare2 ? xOuterSquare2 : x2;
  y2 = y2 > yOuterSquare2 ? yOuterSquare2 : y2;

  const rSquared = r ** 2;
  let count = 0;

  for (let x = x1; x <= x2; ++x) {
    const xDistSquared = (x -  x3) ** 2;

    let yTop = Math.floor(Math.sqrt(rSquared - xDistSquared) + y3);
    yTop = yTop < y2 ? yTop : y2;

    let yBottom = Math.ceil(-Math.sqrt(rSquared - xDistSquared) + y3);
    yBottom = yBottom > y1 ? yBottom : y1;

    if (yTop >= yBottom) count += yTop - yBottom + 1;
  }

  return count;
}

const fs = require('fs');
const content = fs.readFileSync('input.txt', 'utf8');
const result = solve(content);
fs.writeFileSync('output.txt', result + '');
