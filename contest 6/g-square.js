// G. Площадь

// Язык                Время           Память     Ввод            Вывод

// Все языки           0.5 секунд      64Mb       стандартный     стандартный
// GNU C11 7.3         0.3 секунды     256Mb      ввод или        вывод или
// GNU c++ 11 4.9      0.3 секунды     256Mb      input.txt       output.txt
// GNU c++ 11 x32 4.9  0.3 секунды     256Mb
// GCC 5.4.0 C++14     0.3 секунды     256Mb
// GNU c++ 14 4.9      0.3 секунды     256Mb
// GNU c++17 7.3       0.3 секунды     256Mb
// GCC C++17           0.3 секунды     256Mb

// Городская площадь имеет размер n× m и покрыта квадратной плиткой размером 1 × 
// 1. При плановой замене плитки выяснилось, что новой плитки недостаточно для 
// покрытия всей площади, поэтому было решено покрыть плиткой только дорожку по 
// краю площади, а в центре площади разбить прямоугольную клумбу. При этом 
// дорожка должна иметь одинаковую ширину по всем сторонам площади. Определите 
// максимальную ширину дорожки, которую можно выложить из имеющихся плиток.

// Формат ввода

// Первая и вторая строки входных данных содержат по одному числу n и m (3 ≤ n ≤ 
// 2 × 10^9, 3 ≤ m ≤ 2 × 10^9) — размеры площади.

// Третья строка содержит количество имеющихся плиток t, 1 ≤ t < nm.

// Обратите внимание, что значение t может быть больше, чем возможное значение 
// 32-битной целочисленной переменной, поэтому необходимо использовать 64-битные 
// числа (тип int64 в языке Pascal, тип long long в C и C++, тип long в Java и 
// C#).

// Формат вывода

// Программа должна вывести единственное число — максимальную ширину дорожки, 
// которую можно выложить из имеющихся плиток.

// Пример
// Ввод        Вывод
// 6           2
// 7
// 38

// Язык: Node.js 14.15.5


function calcWidth(data) {
    const [n, m, t] = data.toString().trim().split('\n').map(BigInt);
    const minSize = n <= m ? n : m;

    let left = 0n;
    let right = minSize / 2n;

    while (left < right) {
        let medium = (left + right + 1n) / 2n;

        if (checkWidth(medium)) left = medium;
        else right = medium - 1n;
    }

    function checkWidth(width) {
        let squareArea = n * m;
        let flowerbedArea = (n - 2n * width) * (m - 2n * width);
        let walkwayArea = squareArea - flowerbedArea;

        return walkwayArea <= t;
    }

    return left;
}


const fs = require('fs');
let fileContent = fs.readFileSync('input.txt', 'utf8');

const result = calcWidth(fileContent);

fs.writeFileSync('output.txt', result + '');
