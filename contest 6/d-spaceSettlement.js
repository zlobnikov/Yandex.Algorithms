// D. Космическое поселение

// Ограничение времени         1 секунда
// Ограничение памяти          64Mb
// Ввод                        стандартный ввод или input.txt
// Вывод                       стандартный вывод или output.txt

// Для освоения Марса требуется построить исследовательскую базу. База должна 
// состоять из n одинаковых модулей, каждый из которых представляет собой 
// прямоугольник.

// Каждый модуль представляет собой жилой отсек, который имеет форму 
// прямоугольника размером a на b метров. Для повышения надежности модулей 
// инженеры могут добавить вокруг каждого модуля слой дополнительной защиты. 
// Толщина этого слоя должна составлять целое число метров, и все модули должны 
// иметь одинаковую толщину дополнительной защиты. Модуль с защитой, толщина 
// которой равна d метрам, будет иметь форму прямоугольника размером 
// (a+2d)(b+2d) метров.

// Все модули должны быть расположены на заранее подготовленном прямоугольном 
// поле размером wh метров. При этом они должны быть организованы в виде 
// регулярной сетки: их стороны должны быть параллельны сторонам поля, и модули 
// должны быть ориентированы одинаково.

// Требуется написать программу, которая по заданным количеству и размеру 
// модулей, а также размеру поля для их размещения, определяет максимальную 
// толщину слоя дополнительной защиты, который можно добавить к каждому модулю.

// Формат ввода

// Входной файл содержит пять разделенных пробелами целых чисел: n, a, b, w и h 
// (1 ≤ n, a, b, w, h ≤ 10^18). Гарантируется, что без дополнительной защиты все 
// модули можно разместить в поселении описанным образом.

// Формат вывода

// Выходной файл должен содержать одно целое число: максимальную возможную 
// толщину дополнительной защиты. Если дополнительную защиту установить не 
// удастся, требуется вывести число 0.

// Пример 1
// Ввод                Вывод
// 1 1 1 1 1           0

// Пример 2
// Ввод                Вывод
// 1 1 1 3 3           1

// Язык: Node.js 14.15.5


function calcThickness(data) {
    // use BigInt for extremely large numbers
    const [n, a, b, w, h] = data.toString().trim().split(' ').map(BigInt);

    let left = 0n;
    let right = w / 2n;

    while (left < right) {
        let medium = (left + right + 1n) / 2n;

        if (checkThickness(medium, a, b) || checkThickness(medium, b, a)) {
            left = medium;
        } else right = medium - 1n;
    }

    function checkThickness(defense, objWidth, objHeight) {
        let cols = w / (objWidth + 2n * defense);
        if (cols === 0n) return false;

        let rows = n / cols;
        rows = rows * cols === n ? rows : rows + 1n;

        return h >= rows * (objHeight + 2n * defense);
    }

    return left;
}


const fs = require('fs');
let fileContent = fs.readFileSync('input.txt', 'utf8');

const result = calcThickness(fileContent);

fs.writeFileSync('output.txt', result + '');
