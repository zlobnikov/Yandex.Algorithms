// J. Треугольник Максима

// Ограничение времени	    1 секунда
// Ограничение памяти	    64Mb
// Ввод	                    стандартный ввод или input.txt
// Вывод	                стандартный вывод или output.txt

// С детства Максим был неплохим музыкантом и мастером на все руки. Недавно он 
// самостоятельно сделал несложный перкуссионный музыкальный инструмент — 
// треугольник. Ему нужно узнать, какова частота звука, издаваемого его 
// инструментом.

// У Максима есть профессиональный музыкальный тюнер, с помощью которого можно 
// проигрывать ноту с заданной частотой. Максим действует следующим образом: он 
// включает на тюнере ноты с разными частотами и для каждой ноты на слух 
// определяет, ближе или дальше она к издаваемому треугольником звуку, чем 
// предыдущая нота. Поскольку слух у Максима абсолютный, он определяет это 
// всегда абсолютно верно.

// Вам Максим показал запись, в которой приведена последовательность частот, 
// выставляемых им на тюнере, и про каждую ноту, начиная со второй, записано — 
// ближе или дальше она к звуку треугольника, чем предыдущая нота. Заранее 
// известно, что частота звучания треугольника Максима составляет не менее 30 
// герц и не более 4000 герц.

// Требуется написать программу, которая определяет, в каком интервале может 
// находиться частота звучания треугольника.

// Формат ввода

// Первая строка входного файла содержит целое число n — количество нот, которые 
// воспроизводил Максим с помощью тюнера (2 ≤ n ≤ 1000). Последующие n строк 
// содержат записи Максима, причём каждая строка содержит две компоненты: 
// вещественное число f_i — частоту, выставленную на тюнере, в герцах (30 ≤ 
// f_i ≤ 4000), и слово «closer» или слово «further» для каждой частоты, кроме 
// первой.

// Слово «closer» означает, что частота данной ноты ближе к частоте звучания 
// треугольника, чем частота предыдущей ноты, что формально описывается 
// соотношением: |f_i − f_triangle| < |f_i−1 − f_triangle|.

// Слово «further» означает, что частота данной ноты дальше, чем предыдущая.

// Если оказалось, что очередная нота так же близка к звуку треугольника, как и 
// предыдущая нота, то Максим мог записать любое из двух указанных выше слов.

// Гарантируется, что результаты, полученные Максимом, непротиворечивы.

// Формат вывода

// В выходной файл необходимо вывести через пробел два вещественных числа — 
// наименьшее и наибольшее возможное значение частоты звучания треугольника, 
// изготовленного Максимом. Числа должны быть выведены с точностью не хуже 
// 10**(−6).

// Пример 1
// Ввод	                Вывод
// 3                    30.0 260.0
// 440
// 220 closer
// 300 further

// Пример 2
// Ввод	                Вывод
// 4                    531.0 660.0
// 554
// 880 further
// 440 closer
// 622 closer        

// Язык: Node.js 14.15.5


function getInterval(data) {
    let source = data.toString().trim().split('\n');
    let [min, max] = [30.0, 4000.0];

    let n = +source[0];
    if (n < 2) return [min, max];

    let a = +source[1];
    let b, status;

    for (let i = 2; i <= n; i++) {
        [b, status] = source[i].split(' ');
        b = +b;

        if (a === b) continue;

        if (b < a && status === 'closer') {
            [a, max] = lessAndCloser(a, b, max);
        } else if (b < a && status === 'further') {
            [a, min] = lessAndFuther(a, b, min);
        } else if (b > a && status === 'closer') {
            [a, min] = greaterAndCloser(a, b, min);
        } else if (b > a && status === 'further') {
            [a, max] = greaterAndFuther(a, b, max);
        }
    }

    return [min, max];
}

function lessAndCloser(a, b, max) {
    let x = b + (a - b) / 2;
    if (x < max) max = x;
    return [b, max];
}

function lessAndFuther(a, b, min) {
    let x = a - (a - b) / 2;
    if (x > min) min = x;
    return [b, min];
}

function greaterAndCloser(a, b, min) {
    let x = b - (b - a) / 2;
    if (x > min) min = x;
    return [b, min];
}

function greaterAndFuther(a, b, max) {
    let x = a + (b - a) / 2;
    if (x < max) max = x;
    return [b, max];
}


const fs = require('fs');
let fileContent = fs.readFileSync('input.txt', 'utf8');

const result = getInterval(fileContent);

fs.writeFileSync('output.txt', result.join(' '));
