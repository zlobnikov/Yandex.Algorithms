// C. Забастовки

// Ограничение времени               1 секунда
// Ограничение памяти                64Mb
// Ввод                              стандартный ввод или input.txt
// Вывод                             стандартный вывод или output.txt

// Политическая жизнь одной страны очень оживленная. В стране действует K 
// политических партий, каждая из которых регулярно объявляет национальную 
// забастовку. Дни, когда хотя бы одна из партий объявляет забастовку, при 
// условии, что это не суббота или воскресенье (когда и так никто не работает), 
// наносят большой ущерб экономике страны. i-я партия объявляет забастовки 
// строго каждые bi дней, начиная с дня с номером ai. То есть i-я партия 
// объявляет забастовки в дни ai, ai+bi, ai+2bi и т.д. Если в какой-то день 
// несколько партий объявляет забастовку, то это считается одной 
// общенациональной забастовкой. В календаре страны N дней, пронумерованных от 1 
// до N. Первый день года является понедельником, шестой и седьмой дни года — 
// выходные, неделя состоит из семи дней.

// Формат ввода

// Программа получает на вход число дней в году N (1 ≤ N≤ 10^6) и число 
// политических партий K (1 ≤ K ≤ 100). Далее идет K строк, описывающие графики 
// проведения забастовок. i-я строка содержит числа ai и bi (1 ≤ ai, bi ≤ N).

// Формат вывода

// Выведите единственное число: количество забастовок, произошедших в течение 
// года.

// Пример 1
// Ввод                Вывод
// 19 3                8
// 2 3
// 3 5
// 9 8

// Пример 2
// Ввод                Вывод
// 5 2                 5
// 1 2
// 2 2

// Пример 3
// Ввод                Вывод
// 1000 1              715
// 1 1

// Примечания
// Первая партия объявляет забастовки в дни 2, 5, 8, 11, 14, 17. Вторая партия 
// объявляет забастовки в дни 3, 8, 13, 18. Третья партия — в дни 9 и 17. Дни 
// номер 6, 7, 13, 14 являются выходными. Таким образом, общенациональные 
// забастовки пройдут в дни 2, 3, 5, 8, 9, 11, 17, 18.

// Язык: Node.js 14.15.5


function solve(data) {
  data = data.toString().trim().split('\n');
  const [n, k] = data[0].split(/\s+/).map(Number);

  const dates = new Set();

  for (let i = 1; i <= k; ++i) {
    let [date, b] = data[i].split(/\s+/).map(Number);

    while (date <= n) {
      const day = date % 7;
      if (day !== 6 && day !== 0) {
        dates.add(date);
      }

      date += b;
    }
  }

  return dates.size;
}

const fs = require('fs');
const content = fs.readFileSync('input.txt', 'utf8');
const result = solve(content);
fs.writeFileSync('output.txt', result + '');
