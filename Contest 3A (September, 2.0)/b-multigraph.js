// B. Мультиграф

// Ограничение времени         1 секунда
// Ограничение памяти          64Mb
// Ввод                        стандартный ввод или multigraph.in
// Вывод                       стандартный вывод или multigraph.out

// Дан неориентированный невзвешенный граф. В графе возможны петли и кратные 
// рёбра. Постройте такой новый граф без петель и кратных рёбер, что для любых 
// двух вершин в нём расстояние равно расстоянию в исходном графе. Если вершины 
// не связны, расстояние между ними бесконечность.

// Формат ввода

// На первой строке число вершин n и число рёбер m (1 ≤ n, m ≤ 100 000). 
// Следующие m строк содержат пары чисел от 1 до n – рёбра графа.

// Формат вывода

// Новый граф в таком же формате. Рёбра можно выводить в произвольном формате.

// Пример
// Ввод          Вывод
// 3 5           3 3
// 1 1           1 2
// 1 3           1 3
// 2 1           2 3
// 1 2
// 2 3

// Язык: Node.js 14.15.5


function solve(data) {
  data = data.toString().trim().split('\n')
    .map(line => line.trim().split(/\s+/));

  const [n, m] = data[0];
  const ribs = new Set();

  for (let i = 1; i < data.length; ++i) {
    const [a, b] = data[i];

    if (a !== b) {
      ribs.add([a, b].sort().join(' '));
    }
  }

  return `${n} ${ribs.size}\n${[...ribs].join('\n')}`;
}

const fs = require('fs');
const content = fs.readFileSync('multigraph.in', 'utf8');
const result = solve(content);
fs.writeFileSync('multigraph.out', result);
