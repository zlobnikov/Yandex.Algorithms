// A. Префиксные суммы

// Ограничение времени           1 секунда
// Ограничение памяти            256Mb
// Ввод                          стандартный ввод или input.txt
// Вывод                         стандартный вывод или output.txt

// В этой задаче вам нужно будет много раз отвечать на запрос «Найдите сумму 
// чисел на отрезке в массиве».

// Формат ввода

// В первой строке записано два целых числа n и q (1 ≤ n, q ≤ 3 * 10^5) - размер 
// массива и количество запросов.

// Во второй строке записаны n целых чисел ai (1 ≤ ai ≤ 10^9) - сам массив.

// Далее в q строках описаны запросы к массиву. Каждый запрос описывается двумя 
// числами l, r (1 ≤ l ≤ r ≤ n) - левой и правой границей отрезка, на котором 
// нужно найти сумму.

// Формат вывода

// Для каждого запроса в отдельной строке выведите единственное число - сумму на 
// соответствующем отрезке.

// Пример
// Ввод            Вывод
// 4 10            1
// 1 2 3 4         3
// 1 1             6
// 1 2             10
// 1 3             2
// 1 4             5
// 2 2             9
// 2 3             3
// 2 4             7
// 3 3             4
// 3 4
// 4 4

// Дополнение: во втором массиве подаются порядковые номера координат

// Язык: Node.js 14.15.5


function calcSum(data) {
  data = data.trim().split('\n')
    .map(line => line.trim().split(/\s+/)
      .map(Number));

  const [[n, q], numbers] = data.slice(0, 2);
  const queries = data.slice(2);

  const sums = [0];

  for (let i = 0; i < n; ++i) {
    sums.push(numbers[i] + sums[i]);
  }

  const result = [];

  for (let i = 0; i < q; ++i) {
    result.push(sums[ queries[i][1] ] - sums[ queries[i][0] - 1 ]);
  }

  return result.join('\n');
}

const fs = require('fs');
const fileContent = fs.readFileSync('input.txt', 'utf8');

const result = calcSum(fileContent);

fs.writeFileSync('output.txt', result);
