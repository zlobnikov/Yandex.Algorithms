// C. Каждому по компьютеру

// Ограничение времени             1 секунда
// Ограничение памяти              64Mb
// Ввод                            стандартный ввод или input.txt
// Вывод                           стандартный вывод или output.txt

// В новом учебном году на занятия в компьютерные классы Дворца Творчества Юных 
// пришли учащиеся, которые были разбиты на N групп. В i-й группе оказалось Xi 
// человек. Тут же перед директором встала серьезная проблема: как распределить 
// группы по аудиториям. Во дворце имеется M ≥ N аудиторий, в j-й аудитории 
// имеется Yj компьютеров. Для занятий необходимо, чтобы у каждого учащегося был 
// компьютер и еще один компьютер был у преподавателя. Переносить компьютеры из 
// одной аудитории в другую запрещается. Помогите директору!

// Напишите программу, которая найдет, какое максимальное количество групп 
// удастся одновременно распределить по аудиториям, чтобы всем учащимся в каждой 
// группе хватило компьютеров, и при этом остался бы еще хотя бы один для 
// учителя.

// Формат ввода

// На первой строке входного файла расположены числа N и M (1 ≤ N ≤ M ≤ 1000). 
// На второй строке расположено N чисел — X1, …, XN (1 ≤ Xi ≤ 1000 для всех 1 ≤ 
// i ≤ N). На третьей строке расположено M чисел Y1, ..., YM (1 ≤ Yi ≤ 1000 для 
// всех 1 ≤ i ≤ M).

// Формат вывода

// Выведите на первой строке число P - количество групп, которые удастся 
// распределить по аудиториям. На второй строке выведите распределение групп по 
// аудиториям – N чисел, i-е число должно соответствовать номеру аудитории, в 
// которой должна заниматься i-я группа. (Нумерация как групп, так и аудиторий, 
// начинается с 1). Если i-я группа осталась без аудитории, i-е число должно 
// быть равно 0. Если допустимых распределений несколько, выведите любое из них.

// Пример 1
// Ввод              Вывод
// 1 1               1
// 1                 1
// 2

// Пример 2
// Ввод              Вывод
// 1 1               0
// 1                 0
// 1

// Язык: Node.js 14.15.5


function distribute(data) {
  const [[n, m], xn, yn] = data.toString().trim().split('\n')
    .map(line => line.trim().split(/\s+/)
      .map(Number));

  const groups = xn.map((x, i) => [x + 1, i, 0]);
  const classrooms = yn.map((y, i) => [y, i + 1]);

  groups.sort((a, b) => a[0] - b[0]);
  classrooms.sort((a, b) => a[0] - b[0]);

  let counter = 0;
  let roomIndex = 0;

  pointers: for (let groupIndex = 0; groupIndex < n; ++groupIndex) {
    while (groups[groupIndex][0] > classrooms[roomIndex][0]) {
      ++roomIndex;
      if (classrooms[roomIndex] === undefined) break pointers;
    }

    groups[groupIndex][2] = classrooms[roomIndex][1];
    ++counter;
    ++roomIndex;
    if (classrooms[roomIndex] === undefined) break;
  }

  const result = groups.sort((a, b) => a[1] - b[1]).map(group => group[2]);

  return counter + '\n' + result.join(' ');
}

const fs = require('fs');
const fileContent = fs.readFileSync('input.txt', 'utf8');

const result = distribute(fileContent);

fs.writeFileSync('output.txt', result + '');
