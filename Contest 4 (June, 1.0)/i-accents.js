// I. Контрольная по ударениям

// Ограничение времени               1 секунда
// Ограничение памяти                64Mb
// Ввод                              стандартный ввод или input.txt
// Вывод                             стандартный вывод или output.txt

// Учительница задала Пете домашнее задание — в заданном тексте расставить 
// ударения в словах, после чего поручила Васе проверить это домашнее задание. 
// Вася очень плохо знаком с данной темой, поэтому он нашел словарь, в котором 
// указано, как ставятся ударения в словах. К сожалению, в этом словаре 
// присутствуют не все слова. Вася решил, что в словах, которых нет в словаре, 
// он будет считать, что Петя поставил ударения правильно, если в этом слове 
// Петей поставлено ровно одно ударение. Оказалось, что в некоторых словах 
// ударение может быть поставлено больше, чем одним способом. Вася решил, что в 
// этом случае если то, как Петя поставил ударение, соответствует одному из 
// приведенных в словаре вариантов, он будет засчитывать это как правильную 
// расстановку ударения, а если не соответствует, то как ошибку. Вам дан 
// словарь, которым пользовался Вася и домашнее задание, сданное Петей. Ваша 
// задача — определить количество ошибок, которое в этом задании насчитает Вася.

// Формат ввода

// Вводится сначала число N — количество слов в словаре (0 ≤ N ≤ 20 000). Далее 
// идет N строк со словами из словаря. Каждое слово состоит не более чем из 30 
// символов. Все слова состоят из маленьких и заглавных латинских букв. В каждом 
// слове заглавная ровно одна буква — та, на которую попадает ударение. Слова в 
// словаре расположены в алфавитном порядке. Если есть несколько возможностей 
// расстановки ударения в одном и том же слове, то эти варианты в словаре идут в 
// произвольном порядке. Далее идет упражнение, выполненное Петей. Упражнение 
// представляет собой строку текста, суммарным объемом не более 300 000 
// символов. Строка состоит из слов, которые разделяются между собой ровно одним 
// пробелом. Длина каждого слова не превышает 30 символов. Все слова состоят из 
// маленьких и заглавных латинских букв (заглавными обозначены те буквы, над 
// которыми Петя поставил ударение). Петя мог по ошибке в каком-то слове 
// поставить более одного ударения или не поставить ударения вовсе.

// Формат вывода

// Выведите количество ошибок в Петином тексте, которые найдет Вася.

// Пример 1
// Ввод                            Вывод
// 4                               2
// cAnnot
// cannOt
// fOund
// pAge
// thE pAge cAnnot be found

// Пример 2
// Ввод                            Вывод
// 4                               4
// cAnnot
// cannOt
// fOund
// pAge
// The PAGE cannot be found

// Язык: Node.js 14.15.5


function solve(data) {
  data = data.toString().trim().split('\n');
  const n = Number(data[0]);

  const dict = {};
  data.slice(1, n + 1).forEach(word => {
    const lowerCaseWord = word.toLowerCase();
    if (!dict[lowerCaseWord]) dict[lowerCaseWord] = new Set();
    dict[lowerCaseWord].add(word);
  });

  const words = data[n + 1] ? data[n + 1].split(' ') : [];
  let errorsCount = 0;

  words.forEach(word => {
    const lowerCaseWord = word.toLowerCase();
    if ((dict[lowerCaseWord] && !dict[lowerCaseWord].has(word))
      || (!dict[lowerCaseWord] && !hasOneUpperCaseLetter(word))
    ) ++errorsCount;
  });

  return errorsCount;
}

function hasOneUpperCaseLetter(word) {
  const lowerCaseWord = word.toLowerCase();
  let upperCaseLettersCount = 0;

  for (let i = 0; i < word.length; ++i) {
    if (word[i] !== lowerCaseWord[i]) ++upperCaseLettersCount;
  }

  return upperCaseLettersCount === 1;
}

const fs = require('fs');
const content = fs.readFileSync('input.txt', 'utf8');
const result = solve(content);
fs.writeFileSync('output.txt', result + '');
