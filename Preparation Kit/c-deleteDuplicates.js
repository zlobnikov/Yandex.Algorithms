// C. Удаление дубликатов

// Язык                        Ограничение     Ограничение     Ввод            Вывод
//                             времени         памяти
// Все языки                   1 секунда       10Mb            стандартный     стандартный
// Node.js 14.15.5             1 секунда       20Mb            ввод или        вывод или
// Oracle Java 7               1 секунда       20Mb            input.txt       output.txt
// Kotlin 1.4.30 (JRE 11)      1 секунда       20Mb
// Oracle Java 8               1 секунда       20Mb
// Scala 2.13.4                1 секунда       20Mb
// Kotlin 1.1.50 (JRE 1.8.0)   1 секунда       20Mb
// Kotlin 1.3.50 (JRE 1.8.0)   1 секунда       20Mb
// Node JS 8.16                1 секунда       20Mb

// Дан упорядоченный по неубыванию массив целых 32-разрядных чисел. Требуется 
// удалить из него все повторения.

// Желательно получить решение, которое не считывает входной файл целиком в 
// память, т.е., использует лишь константный объем памяти в процессе работы.

// Формат ввода
// Первая строка входного файла содержит единственное число n, n ≤ 1 000 000.

// На следующих n строк расположены числа — элементы массива, по одному на 
// строку. Числа отсортированы по неубыванию.

// Формат вывода

// Выходной файл должен содержать следующие в порядке возрастания уникальные 
// элементы входного массива.

// Пример 1
// Ввод       Вывод
// 5          2
// 2          4
// 4          8
// 8
// 8
// 8

// Пример 2
// Ввод       Вывод
// 5          2
// 2          8
// 2
// 2
// 8
// 8

// Язык: Node.js 14.15.5


const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin
});

const numbers = [];
let start = true;

rl.on('line', (line) => {
    if (start) start = false;

    else {
        if (line !== numbers[numbers.length - 1]) {
            numbers.push(line);
        }
    }

}).on('close', () => {
    process.stdout.write(numbers.join('\n'));
});
