// D. Генерация скобочных последовательностей

// Ограничение времени           1 секунда
// Ограничение памяти            20Mb
// Ввод                          стандартный ввод или input.txt
// Вывод                         стандартный вывод или output.txt

// Дано целое число n. Требуется вывести все правильные скобочные 
// последовательности длины 2 ⋅ n, упорядоченные лексикографически (см. 
// https://ru.wikipedia.org/wiki/Лексикографический_порядок).

// В задаче используются только круглые скобки.

// Желательно получить решение, которое работает за время, пропорциональное 
// общему количеству правильных скобочных последовательностей в ответе, и при 
// этом использует объём памяти, пропорциональный n.

// Формат ввода

// Единственная строка входного файла содержит целое число n, 0 ≤ n ≤ 11

// Формат вывода

// Выходной файл содержит сгенерированные правильные скобочные 
// последовательности, упорядоченные лексикографически.

// Пример 1
// Ввод            Вывод
// 2               (())
//                 ()()

// Пример 2
// Ввод            Вывод
// 3               ((()))
//                 (()())
//                 (())()
//                 ()(())
//                 ()()()

// Язык: Node.js 14.15.5


function solve(data) {
  const n = Number(data);

  const array = Array(2 * n).fill('(');
  let diff = 0;
  let index = 0;

  const answer = [];

  function getBrackets(diff, index) {
    if (diff <= 2 * n - index - 2) {
      array[index] = '(';
      getBrackets(diff + 1, index + 1);
    }

    if (diff > 0) {
      array[index] = ')';
      getBrackets(diff - 1, index + 1);
    }

    if (index === 2 * n && diff === 0) {
      answer.push(array.join(''));
    }
  }

  getBrackets(diff, index);
  return answer.join('\n');
}

process.stdin.on('data', data => {
  const result = solve(data);
  process.stdout.write(result);
  process.exit();
});
