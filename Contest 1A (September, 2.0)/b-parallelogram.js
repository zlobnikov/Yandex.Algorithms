// B. Параллелограмм

// Ограничение времени                   1 секунда
// Ограничение памяти                    64Mb
// Ввод                                  стандартный ввод или input.txt
// Вывод                                 стандартный вывод или output.txt

// На уроке геометрии семиклассники Вася и Петя узнали, что такое 
// параллелограмм. На перемене после урока они стали играть в игру: Петя называл 
// координаты четырех точек в произвольном порядке, а Вася должен был ответить, 
// являются ли эти точки вершинами параллелограмма.

// Вася, если честно, не очень понял тему про параллелограммы, и ему требуется 
// программа, умеющая правильно отвечать на Петины вопросы.

// Напомним, что параллелограммом называется четырехугольник, противоположные 
// стороны которого равны и параллельны.

// Формат ввода

// В первой строке входного файла записано целое число N (1 ≤ N ≤ 10) - 
// количество заданных Петей вопросов. Каждая из N последующих строк содержит 
// описание четырех точек - четыре пары целых чисел X и Y (−100 ≤ X ≤ 100, 
// −100 ≤ Y ≤ 100), обозначающих координаты точки. Гарантируется, что четыре 
// точки, о которых идет речь в одном вопросе, не лежат на одной прямой.

// Формат вывода

// Для каждого из вопросов выведите "YES", если четыре заданные точки могут 
// образовать параллелограмм, и "NO" в противном случае. Ответ на каждый из 
// запросов должен быть в отдельной строке без кавычек.

// Пример
// Ввод                    Вывод
// 3                       YES
// 1 1 4 2 3 0 2 3         NO
// 1 1 5 2 2 3 3 0         YES
// 0 0 5 1 6 3 1 2

// Язык: Node.js 14.15.5


function solve(data) {
  data = data.toString().trim().split('\n')
    .map(line => line.split(/\s+/)
      .map(Number)
    );

  const answers = [];

  for (let i = 1; i < data.length; ++i) {
    answers.push(isParallelogram(data[i]) ? 'YES' : 'NO');
  }

  return answers.join('\n');
}

function isParallelogram(coords) {
  const [x1, y1, x2, y2, x3, y3, x4, y4] = coords;

  return (
    check(x1, y1, x2, y2, x3, y3, x4, y4)
    || check(x1, y1, x3, y3, x2, y2, x4, y4)
    || check(x1, y1, x2, y2, x4, y4, x3, y3)
  );
}

function check(x1, y1, x2, y2, x3, y3, x4, y4) {
  return (
    (x2 - x1) ** 2 + (y2 - y1) ** 2 === (x3 - x4) ** 2 + (y3 - y4) ** 2
    && x3 - x2 === x4 - x1
    && y3 - y2 === y4 - y1

    && (x3 - x2) ** 2 + (y3 - y2) ** 2 === (x4 - x1) ** 2 + (y4 - y1) ** 2
    && x2 - x1 === x3 - x4
    && y2 - y1 === y3 - y4
  );
}

const fs = require('fs');
const content = fs.readFileSync('input.txt', 'utf8');
const result = solve(content);
fs.writeFileSync('output.txt', result);
